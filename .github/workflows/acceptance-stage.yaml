name: Acceptance stage

on:
  workflow_run:
    workflows:
      - Commit stage
    types:
      - completed

env:
  PHP_EXTENSIONS: ctype, iconv, json, curl, gd, intl, opcache, openssl, mbstring, mysql, pdo_sqlite
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1


jobs:
  on-commit-stage-success:
    runs-on: ubuntu-latest
    name: Event - Commit Stage Success
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout on branch ${{ github.event.workflow_run.head_branch }}|SHA-${{ github.event.workflow_run.head_commit.id }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: Dump GHA Context
        uses: crazy-max/ghaction-dump-context@v1


  triggering-workflow-info:
    runs-on: ubuntu-18.04
    name: Triggering workflow info
    steps:
      - name: Checkout on branch ${{ github.event.workflow_run.head_branch }}|SHA-${{ github.event.workflow_run.head_commit.id }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - branch name ${{ github.event.workflow_run.head_branch }}
        run: echo ${{ github.event.workflow_run.head_branch }}

      - name: info triggering workflow - SHA ${{ github.event.workflow_run.head_commit.id }}
        run: echo SHA from triggering workflow ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - commit message
        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: info triggering workflow - author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'

      - name: info triggering workflow - committer '${{ github.event.workflow_run.head_commit.committer.name }}' -'${{ github.event.workflow_run.head_commit.committer.email }}'
        run: echo author '${{ github.event.workflow_run.head_commit.author.name }}' -'${{ github.event.workflow_run.head_commit.author.email }}'


  app-preconditions-checks:
    name: App preconditions checks
    runs-on: ubuntu-18.04
    needs: [on-commit-stage-success]
    timeout-minutes: 5
    services:
      mysql:
        image: mariadb:10.3.34
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: symfony_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.workflow_run.head_branch }}|SHA-${{ github.event.workflow_run.head_commit.id }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - commit message
        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --ansi --no-scripts

      - name: Validate configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi

      - name: Validate Symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi
        continue-on-error: true

      - name: Validate twig templates
        run: |
          ./bin/console lint:twig templates/ --ansi

#      - name: Run database migrations
#        if: ${{ github.ref_name == '5.4' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Run database schema update
#        if: ${{ github.ref_name != '5.4' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Run database schema validate
        run: ./bin/console doctrine:schema:validate -e test --ansi
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34


  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest
    needs:
      - app-preconditions-checks
    timeout-minutes: 15
    services:
      mysql:
        image: mariadb:10.3.34
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: symfony_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.workflow_run.head_branch }}|SHA-${{ github.event.workflow_run.head_commit.id }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - commit message
        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --ansi --no-scripts

#      - name: Run database migrations
#        if: ${{ github.ref_name == '5.4' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Run database schema update
#        if: ${{ github.ref_name != '5.4' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Run only database test
        run: bin/phpunit --testsuite=integration --colors=always
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34
          SYMFONY_DEPRECATIONS_HELPER: disabled


  functional-test:
    name: Functional tests
    runs-on: ubuntu-latest
    needs:
      - app-preconditions-checks
    timeout-minutes: 15
    services:
      mysql:
        image: mariadb:10.3.34
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: symfony_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        php:
          - '8.0'
        node:
          - '16.x'
      fail-fast: true
    steps:
      - name: Checkout on branch ${{ github.event.workflow_run.head_branch }}|SHA-${{ github.event.workflow_run.head_commit.id }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: info triggering workflow - commit message
        run: echo commit message from triggering workflow '${{ github.event.workflow_run.head_commit.message }}'

      - name: Setup cache environment
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache extensions
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: symfony

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --ansi --no-scripts

#      - name: Run database migrations
#        if: ${{ github.ref_name == '5.4' }}
#        run: ./bin/console doctrine:migrations:migrate -e test -n -vv --allow-no-migration --ansi
#        env:
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Run database schema update
#        if: ${{ github.ref_name != '5.4' }}
        run: ./bin/console doctrine:schema:update -e test --force --ansi
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ matrix.node }}"

#      - name: Get Yarn cache directory
#        id: yarn-cache
#        run: echo "::set-output name=dir::$(yarn cache dir)"
#
#      - name: Cache Yarn
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.yarn-cache.outputs.dir }}
#          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#
#      - name: Install JS dependencies
#        run: yarn install

      - name: Build assets
        run: |
          bin/console assets:install public -vvv -e test
#          yarn build

      - name: Run webserver
        run: symfony server:start --port=8080 --dir=public --daemon --no-tls

      - name: Run functional testsuite
        run: bin/phpunit --testsuite=functional --colors=always
        env:
          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony?serverVersion=mariadb-10.3.34
          SYMFONY_DEPRECATIONS_HELPER: disabled
